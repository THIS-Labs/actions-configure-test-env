name: 'Configure thiscovery test environment'
description: 'Configures GitHub Action pipelines to use as test environment the AWS account of the developer who initiated the pipeline (actor)'
inputs:
  afs25_account:
    description: 'AWS account number for afs25'
    required: true
  sem86_account:
    description: 'AWS account number for sem86'
    required: true
  amp205_account:
    description: 'AWS account number for amp205'
    required: true
  afs25_sg_account:
    description: 'AWS security group account id for afs25'
    required: true
  sem86_sg_account:
    description: 'AWS security group account id for sem86'
    required: true
  amp205_sg_account:
    description: 'AWS security group account id for amp205'
    required: true
  sem86_slack_bot_token:
    description: 'Slack app slackbot token for sem86'
    required: false
  afs25_slack_bot_token:
    description: 'Slack app slackbot token for afs25'
    required: false
  amp205_slack_bot_token:
    description: 'Slack app slackbot token for amp205'
    required: false
  sem86_test_email:
    description: 'Test email for sem86'
    required: false
  afs25_test_email:
    description: 'Test email for afs25'
    required: false
  amp205_test_email:
    description: 'Test email for amp206'
    required: false
runs:
  using: "composite"
  steps:
    # Configure target test account based on actor
    - if: ${{ github.actor == 'afs25' }}
      name: Sets env vars for afs25
      shell: bash
      run: |
        echo "AWS_TEST_ACCOUNT=${{ inputs.afs25_account }}" >> $GITHUB_ENV
        echo "AWS_TEST_ENV=test-afs25" >> $GITHUB_ENV
  
    - if: ${{ github.actor == 'sophiemachin' }}
      name: Sets env vars for sem86
      shell: bash
      run: |
        echo "AWS_TEST_ACCOUNT=${{ inputs.sem86_account }}" >> $GITHUB_ENV
        echo "AWS_TEST_ENV=test-sem86" >> $GITHUB_ENV
        echo "SECURITY_GROUP_ID=${{ inputs.sem86_sg_account }}" >> $GITHUB_ENV
        echo "TEST_SLACK_BOT_TOKEN=${{ inputs.sem86_slack_bot_token }}" >> $GITHUB_ENV
        echo "TESTER_EMAIL=${{ inputs.sem86_test_email }}" >> $GITHUB_ENV

    - if: ${{ github.actor == 'this-andy' }}
      name: Sets env vars for amp205
      shell: bash
      run: |
        echo "AWS_TEST_ACCOUNT=${{ inputs.amp205_account }}" >> $GITHUB_ENV
        echo "AWS_TEST_ENV=test-amp205" >> $GITHUB_ENV
        echo "SECURITY_GROUP_ID=${{ inputs.amp205_sg_account }}" >> $GITHUB_ENV
        echo "TEST_SLACK_BOT_TOKEN=${{ inputs.amp205_slack_bot_token }}" >> $GITHUB_ENV
        echo "TESTER_EMAIL=${{ inputs.amp205_test_email }}" >> $GITHUB_ENV

    - if: ${{ github.actor == 'alistairclark' }}
      name: Sets env vars for afs25
      shell: bash
      run: |
        echo "AWS_TEST_ACCOUNT=${{ inputs.afs25_account }}" >> $GITHUB_ENV
        echo "AWS_TEST_ENV=test-afs25" >> $GITHUB_ENV
        echo "SECURITY_GROUP_ID=${{ inputs.afs25_sg_account }}" >> $GITHUB_ENV
        echo "TEST_SLACK_BOT_TOKEN=${{ inputs.afs25_slack_bot_token }}" >> $GITHUB_ENV
        echo "TESTER_EMAIL=${{ inputs.afs25_test_email }}" >> $GITHUB_ENV

    - name: Abort workflow if actor unknown
      shell: bash
      run: |
        if [ -z ${{ env.AWS_TEST_ENV }} ]; then
          echo "Actor ${{ github.actor }} unknown. Aborting workflow"
          exit 1
        fi

    - name: Set additional env variables
      shell: bash
      run: |
        echo "SECRETS_NAMESPACE=/${AWS_TEST_ENV}/" >> $GITHUB_ENV
        echo "UNIT_TEST_NAMESPACE=/${AWS_TEST_ENV}/" >> $GITHUB_ENV
        echo "TEST_ON_AWS=True" >> $GITHUB_ENV
        echo "TESTING_ACCOUNT_DEPLOYMENT_ROLE=arn:aws:iam::${AWS_TEST_ACCOUNT}:role/thiscovery-devops-${AWS_TEST_ENV}-${AWS_REGION}-PipelineExec" >> $GITHUB_ENV
        echo "TESTING_ACCOUNT_TEST_ROLE=arn:aws:iam::${AWS_TEST_ACCOUNT}:role/thiscovery-dev-setup-${AWS_TEST_ENV}-${AWS_REGION}-TestingExec" >> $GITHUB_ENV
        echo "ARTIFACTS_BUCKET=thiscovery-devops-${AWS_TEST_ENV}-deployment-artifacts" >> $GITHUB_ENV
        echo "CLOUDFORMATION_EXECUTION_ROLE=arn:aws:iam::${AWS_TEST_ACCOUNT}:role/thiscovery-devops-${AWS_TEST_ENV}-${AWS_REGION}-CFExec" >> $GITHUB_ENV
        echo "DEPLOYMENT_METHOD=github_actions" >> $GITHUB_ENV
        echo "PACKAGED_TEMPLATE=${{ env.STACK_NAME }}-packaged-${{ env.AWS_TEST_ENV }}.yaml" >> $GITHUB_ENV
        echo "TEST_CALENDAR_EMAIL=${{ inputs.test_calendar_email }}" >> $GITHUB_ENV

